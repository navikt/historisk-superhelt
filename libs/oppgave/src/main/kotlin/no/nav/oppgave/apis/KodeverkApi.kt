/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package no.nav.oppgave.apis

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity


import no.nav.oppgave.models.Gjelder
import no.nav.oppgave.models.Oppgavetype
import no.nav.oppgave.models.Tema
import no.nav.oppgave.infrastructure.*

class KodeverkApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )


    @Throws(RestClientResponseException::class)
    fun hentAlleTemaer(xCorrelationID: kotlin.String): kotlin.collections.List<Tema> {
        val result = hentAlleTemaerWithHttpInfo(xCorrelationID = xCorrelationID)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun hentAlleTemaerWithHttpInfo(xCorrelationID: kotlin.String): ResponseEntity<kotlin.collections.List<Tema>> {
        val localVariableConfig = hentAlleTemaerRequestConfig(xCorrelationID = xCorrelationID)
        return request<Unit, kotlin.collections.List<Tema>>(
            localVariableConfig
        )
    }

    fun hentAlleTemaerRequestConfig(xCorrelationID: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/kodeverk/tema",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun hentGjelderverdierForTema(xCorrelationID: kotlin.String, tema: kotlin.String): kotlin.collections.List<Gjelder> {
        val result = hentGjelderverdierForTemaWithHttpInfo(xCorrelationID = xCorrelationID, tema = tema)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun hentGjelderverdierForTemaWithHttpInfo(xCorrelationID: kotlin.String, tema: kotlin.String): ResponseEntity<kotlin.collections.List<Gjelder>> {
        val localVariableConfig = hentGjelderverdierForTemaRequestConfig(xCorrelationID = xCorrelationID, tema = tema)
        return request<Unit, kotlin.collections.List<Gjelder>>(
            localVariableConfig
        )
    }

    fun hentGjelderverdierForTemaRequestConfig(xCorrelationID: kotlin.String, tema: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "tema" to tema,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/kodeverk/gjelder/{tema}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun hentOppgavetyperForTema(xCorrelationID: kotlin.String, tema: kotlin.String): kotlin.collections.List<Oppgavetype> {
        val result = hentOppgavetyperForTemaWithHttpInfo(xCorrelationID = xCorrelationID, tema = tema)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun hentOppgavetyperForTemaWithHttpInfo(xCorrelationID: kotlin.String, tema: kotlin.String): ResponseEntity<kotlin.collections.List<Oppgavetype>> {
        val localVariableConfig = hentOppgavetyperForTemaRequestConfig(xCorrelationID = xCorrelationID, tema = tema)
        return request<Unit, kotlin.collections.List<Oppgavetype>>(
            localVariableConfig
        )
    }

    fun hentOppgavetyperForTemaRequestConfig(xCorrelationID: kotlin.String, tema: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "tema" to tema,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/kodeverk/oppgavetype/{tema}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

}
