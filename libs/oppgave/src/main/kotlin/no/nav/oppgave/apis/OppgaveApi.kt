/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package no.nav.oppgave.apis

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity


import no.nav.oppgave.models.HendelseJson
import no.nav.oppgave.models.Oppgave
import no.nav.oppgave.models.OpprettOppgaveRequest
import no.nav.oppgave.models.PatchOppgaveRequest
import no.nav.oppgave.models.SokOppgaverResponse
import no.nav.oppgave.infrastructure.*

class OppgaveApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )


    @Throws(RestClientResponseException::class)
    fun finnOppgaver(xCorrelationID: kotlin.String, statuskategori: kotlin.String? = null, tema: kotlin.collections.List<kotlin.String>? = null, oppgavetype: kotlin.collections.List<kotlin.String>? = null, tildeltEnhetsnr: kotlin.String? = null, tilordnetRessurs: kotlin.String? = null, behandlingstema: kotlin.String? = null, behandlingstype: kotlin.String? = null, aktoerId: kotlin.collections.List<kotlin.String>? = null, journalpostId: kotlin.collections.List<kotlin.String>? = null, saksreferanse: kotlin.collections.List<kotlin.String>? = null, ferdigstiltFom: kotlin.String? = null, ferdigstiltTom: kotlin.String? = null, orgnr: kotlin.collections.List<kotlin.String>? = null, limit: kotlin.Long? = 10L, offset: kotlin.Long? = null): SokOppgaverResponse {
        val result = finnOppgaverWithHttpInfo(xCorrelationID = xCorrelationID, statuskategori = statuskategori, tema = tema, oppgavetype = oppgavetype, tildeltEnhetsnr = tildeltEnhetsnr, tilordnetRessurs = tilordnetRessurs, behandlingstema = behandlingstema, behandlingstype = behandlingstype, aktoerId = aktoerId, journalpostId = journalpostId, saksreferanse = saksreferanse, ferdigstiltFom = ferdigstiltFom, ferdigstiltTom = ferdigstiltTom, orgnr = orgnr, limit = limit, offset = offset)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun finnOppgaverWithHttpInfo(xCorrelationID: kotlin.String, statuskategori: kotlin.String? = null, tema: kotlin.collections.List<kotlin.String>? = null, oppgavetype: kotlin.collections.List<kotlin.String>? = null, tildeltEnhetsnr: kotlin.String? = null, tilordnetRessurs: kotlin.String? = null, behandlingstema: kotlin.String? = null, behandlingstype: kotlin.String? = null, aktoerId: kotlin.collections.List<kotlin.String>? = null, journalpostId: kotlin.collections.List<kotlin.String>? = null, saksreferanse: kotlin.collections.List<kotlin.String>? = null, ferdigstiltFom: kotlin.String? = null, ferdigstiltTom: kotlin.String? = null, orgnr: kotlin.collections.List<kotlin.String>? = null, limit: kotlin.Long? = 10L, offset: kotlin.Long? = null): ResponseEntity<SokOppgaverResponse> {
        val localVariableConfig = finnOppgaverRequestConfig(xCorrelationID = xCorrelationID, statuskategori = statuskategori, tema = tema, oppgavetype = oppgavetype, tildeltEnhetsnr = tildeltEnhetsnr, tilordnetRessurs = tilordnetRessurs, behandlingstema = behandlingstema, behandlingstype = behandlingstype, aktoerId = aktoerId, journalpostId = journalpostId, saksreferanse = saksreferanse, ferdigstiltFom = ferdigstiltFom, ferdigstiltTom = ferdigstiltTom, orgnr = orgnr, limit = limit, offset = offset)
        return request<Unit, SokOppgaverResponse>(
            localVariableConfig
        )
    }

    fun finnOppgaverRequestConfig(xCorrelationID: kotlin.String, statuskategori: kotlin.String? = null, tema: kotlin.collections.List<kotlin.String>? = null, oppgavetype: kotlin.collections.List<kotlin.String>? = null, tildeltEnhetsnr: kotlin.String? = null, tilordnetRessurs: kotlin.String? = null, behandlingstema: kotlin.String? = null, behandlingstype: kotlin.String? = null, aktoerId: kotlin.collections.List<kotlin.String>? = null, journalpostId: kotlin.collections.List<kotlin.String>? = null, saksreferanse: kotlin.collections.List<kotlin.String>? = null, ferdigstiltFom: kotlin.String? = null, ferdigstiltTom: kotlin.String? = null, orgnr: kotlin.collections.List<kotlin.String>? = null, limit: kotlin.Long? = 10L, offset: kotlin.Long? = null) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (statuskategori != null) {
                    put("statuskategori", listOf(statuskategori.toString()))
                }
                if (tema != null) {
                    put("tema", toMultiValue(tema.toList(), "multi"))
                }
                if (oppgavetype != null) {
                    put("oppgavetype", toMultiValue(oppgavetype.toList(), "multi"))
                }
                if (tildeltEnhetsnr != null) {
                    put("tildeltEnhetsnr", listOf(tildeltEnhetsnr.toString()))
                }
                if (tilordnetRessurs != null) {
                    put("tilordnetRessurs", listOf(tilordnetRessurs.toString()))
                }
                if (behandlingstema != null) {
                    put("behandlingstema", listOf(behandlingstema.toString()))
                }
                if (behandlingstype != null) {
                    put("behandlingstype", listOf(behandlingstype.toString()))
                }
                if (aktoerId != null) {
                    put("aktoerId", toMultiValue(aktoerId.toList(), "multi"))
                }
                if (journalpostId != null) {
                    put("journalpostId", toMultiValue(journalpostId.toList(), "multi"))
                }
                if (saksreferanse != null) {
                    put("saksreferanse", toMultiValue(saksreferanse.toList(), "multi"))
                }
                if (ferdigstiltFom != null) {
                    put("ferdigstiltFom", listOf(ferdigstiltFom.toString()))
                }
                if (ferdigstiltTom != null) {
                    put("ferdigstiltTom", listOf(ferdigstiltTom.toString()))
                }
                if (orgnr != null) {
                    put("orgnr", toMultiValue(orgnr.toList(), "multi"))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/oppgaver",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun hentHendelser(xCorrelationID: kotlin.String, oppgaveId: kotlin.Long): HendelseJson {
        val result = hentHendelserWithHttpInfo(xCorrelationID = xCorrelationID, oppgaveId = oppgaveId)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun hentHendelserWithHttpInfo(xCorrelationID: kotlin.String, oppgaveId: kotlin.Long): ResponseEntity<HendelseJson> {
        val localVariableConfig = hentHendelserRequestConfig(xCorrelationID = xCorrelationID, oppgaveId = oppgaveId)
        return request<Unit, HendelseJson>(
            localVariableConfig
        )
    }

    fun hentHendelserRequestConfig(xCorrelationID: kotlin.String, oppgaveId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "oppgaveId" to oppgaveId,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/oppgaver/{oppgaveId}/hendelser",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun hentKommentarer(xCorrelationID: kotlin.String, id: kotlin.Long): Unit {
        hentKommentarerWithHttpInfo(xCorrelationID = xCorrelationID, id = id)
    }

    @Throws(RestClientResponseException::class)
    fun hentKommentarerWithHttpInfo(xCorrelationID: kotlin.String, id: kotlin.Long): ResponseEntity<Unit> {
        val localVariableConfig = hentKommentarerRequestConfig(xCorrelationID = xCorrelationID, id = id)
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun hentKommentarerRequestConfig(xCorrelationID: kotlin.String, id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        
        val params = mutableMapOf<String, Any>(
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/oppgaver/{id}/kommentarer",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun hentOppgave(xCorrelationID: kotlin.String, id: kotlin.Long): Oppgave {
        val result = hentOppgaveWithHttpInfo(xCorrelationID = xCorrelationID, id = id)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun hentOppgaveWithHttpInfo(xCorrelationID: kotlin.String, id: kotlin.Long): ResponseEntity<Oppgave> {
        val localVariableConfig = hentOppgaveRequestConfig(xCorrelationID = xCorrelationID, id = id)
        return request<Unit, Oppgave>(
            localVariableConfig
        )
    }

    fun hentOppgaveRequestConfig(xCorrelationID: kotlin.String, id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/oppgaver/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun opprettOppgave(xCorrelationID: kotlin.String, opprettOppgaveRequest: OpprettOppgaveRequest): Oppgave {
        val result = opprettOppgaveWithHttpInfo(xCorrelationID = xCorrelationID, opprettOppgaveRequest = opprettOppgaveRequest)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun opprettOppgaveWithHttpInfo(xCorrelationID: kotlin.String, opprettOppgaveRequest: OpprettOppgaveRequest): ResponseEntity<Oppgave> {
        val localVariableConfig = opprettOppgaveRequestConfig(xCorrelationID = xCorrelationID, opprettOppgaveRequest = opprettOppgaveRequest)
        return request<OpprettOppgaveRequest, Oppgave>(
            localVariableConfig
        )
    }

    fun opprettOppgaveRequestConfig(xCorrelationID: kotlin.String, opprettOppgaveRequest: OpprettOppgaveRequest) : RequestConfig<OpprettOppgaveRequest> {
        val localVariableBody = opprettOppgaveRequest
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/oppgaver",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun patchOppgave(xCorrelationID: kotlin.String, id: kotlin.Long, patchOppgaveRequest: PatchOppgaveRequest): Oppgave {
        val result = patchOppgaveWithHttpInfo(xCorrelationID = xCorrelationID, id = id, patchOppgaveRequest = patchOppgaveRequest)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun patchOppgaveWithHttpInfo(xCorrelationID: kotlin.String, id: kotlin.Long, patchOppgaveRequest: PatchOppgaveRequest): ResponseEntity<Oppgave> {
        val localVariableConfig = patchOppgaveRequestConfig(xCorrelationID = xCorrelationID, id = id, patchOppgaveRequest = patchOppgaveRequest)
        return request<PatchOppgaveRequest, Oppgave>(
            localVariableConfig
        )
    }

    fun patchOppgaveRequestConfig(xCorrelationID: kotlin.String, id: kotlin.Long, patchOppgaveRequest: PatchOppgaveRequest) : RequestConfig<PatchOppgaveRequest> {
        val localVariableBody = patchOppgaveRequest
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v1/oppgaver/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

}
