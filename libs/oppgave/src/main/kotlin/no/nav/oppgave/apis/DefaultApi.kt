/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package no.nav.oppgave.apis

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity


import no.nav.oppgave.models.Filter
import no.nav.oppgave.models.Koekriterier
import no.nav.oppgave.models.Oppgavesok
import no.nav.oppgave.models.SokOppgaverResponse
import no.nav.oppgave.infrastructure.*

class DefaultApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )


    @Throws(RestClientResponseException::class)
    fun finnOppgaver1(enhetsnr: kotlin.String, xCorrelationID: kotlin.String? = null, oppgavesok: Oppgavesok? = null): SokOppgaverResponse {
        val result = finnOppgaver1WithHttpInfo(enhetsnr = enhetsnr, xCorrelationID = xCorrelationID, oppgavesok = oppgavesok)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun finnOppgaver1WithHttpInfo(enhetsnr: kotlin.String, xCorrelationID: kotlin.String? = null, oppgavesok: Oppgavesok? = null): ResponseEntity<SokOppgaverResponse> {
        val localVariableConfig = finnOppgaver1RequestConfig(enhetsnr = enhetsnr, xCorrelationID = xCorrelationID, oppgavesok = oppgavesok)
        return request<Oppgavesok, SokOppgaverResponse>(
            localVariableConfig
        )
    }

    fun finnOppgaver1RequestConfig(enhetsnr: kotlin.String, xCorrelationID: kotlin.String? = null, oppgavesok: Oppgavesok? = null) : RequestConfig<Oppgavesok> {
        val localVariableBody = oppgavesok
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID?.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "enhetsnr" to enhetsnr,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/enhet/{enhetsnr}/oppgaver/sok",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun hentRestanse(enhetsnr: kotlin.String, xCorrelationID: kotlin.String? = null, filter: Filter? = null): SokOppgaverResponse {
        val result = hentRestanseWithHttpInfo(enhetsnr = enhetsnr, xCorrelationID = xCorrelationID, filter = filter)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun hentRestanseWithHttpInfo(enhetsnr: kotlin.String, xCorrelationID: kotlin.String? = null, filter: Filter? = null): ResponseEntity<SokOppgaverResponse> {
        val localVariableConfig = hentRestanseRequestConfig(enhetsnr = enhetsnr, xCorrelationID = xCorrelationID, filter = filter)
        return request<Filter, SokOppgaverResponse>(
            localVariableConfig
        )
    }

    fun hentRestanseRequestConfig(enhetsnr: kotlin.String, xCorrelationID: kotlin.String? = null, filter: Filter? = null) : RequestConfig<Filter> {
        val localVariableBody = filter
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID?.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "enhetsnr" to enhetsnr,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/enhet/{enhetsnr}/oppgaver/restanse",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun publiserKafkahendelser(): Unit {
        publiserKafkahendelserWithHttpInfo()
    }

    @Throws(RestClientResponseException::class)
    fun publiserKafkahendelserWithHttpInfo(): ResponseEntity<Unit> {
        val localVariableConfig = publiserKafkahendelserRequestConfig()
        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    fun publiserKafkahendelserRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/oppgaver/kafka",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun tildelMeg(enhetsnr: kotlin.String, xCorrelationID: kotlin.String? = null, koekriterier: Koekriterier? = null): SokOppgaverResponse {
        val result = tildelMegWithHttpInfo(enhetsnr = enhetsnr, xCorrelationID = xCorrelationID, koekriterier = koekriterier)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun tildelMegWithHttpInfo(enhetsnr: kotlin.String, xCorrelationID: kotlin.String? = null, koekriterier: Koekriterier? = null): ResponseEntity<SokOppgaverResponse> {
        val localVariableConfig = tildelMegRequestConfig(enhetsnr = enhetsnr, xCorrelationID = xCorrelationID, koekriterier = koekriterier)
        return request<Koekriterier, SokOppgaverResponse>(
            localVariableConfig
        )
    }

    fun tildelMegRequestConfig(enhetsnr: kotlin.String, xCorrelationID: kotlin.String? = null, koekriterier: Koekriterier? = null) : RequestConfig<Koekriterier> {
        val localVariableBody = koekriterier
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID?.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "enhetsnr" to enhetsnr,
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/enhet/{enhetsnr}/oppgaver/me/tildel",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

}
