/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package no.nav.oppgave.apis

import org.springframework.web.client.RestClient
import org.springframework.web.client.RestClientResponseException

import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.http.ResponseEntity


import no.nav.oppgave.models.HentMapperResponse
import no.nav.oppgave.models.Mappe
import no.nav.oppgave.infrastructure.*

class MappeApi(client: RestClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(RestClient.builder()
        .baseUrl(baseUrl)
        .messageConverters { it.add(MappingJackson2HttpMessageConverter()) }
        .build()
    )


    @Throws(RestClientResponseException::class)
    fun finnMapper(xCorrelationID: kotlin.String, tema: kotlin.collections.List<kotlin.String>? = null, enhetsnr: kotlin.String? = null, offset: kotlin.Long? = null, limit: kotlin.Long? = 10L): HentMapperResponse {
        val result = finnMapperWithHttpInfo(xCorrelationID = xCorrelationID, tema = tema, enhetsnr = enhetsnr, offset = offset, limit = limit)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun finnMapperWithHttpInfo(xCorrelationID: kotlin.String, tema: kotlin.collections.List<kotlin.String>? = null, enhetsnr: kotlin.String? = null, offset: kotlin.Long? = null, limit: kotlin.Long? = 10L): ResponseEntity<HentMapperResponse> {
        val localVariableConfig = finnMapperRequestConfig(xCorrelationID = xCorrelationID, tema = tema, enhetsnr = enhetsnr, offset = offset, limit = limit)
        return request<Unit, HentMapperResponse>(
            localVariableConfig
        )
    }

    fun finnMapperRequestConfig(xCorrelationID: kotlin.String, tema: kotlin.collections.List<kotlin.String>? = null, enhetsnr: kotlin.String? = null, offset: kotlin.Long? = null, limit: kotlin.Long? = 10L) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (tema != null) {
                    put("tema", toMultiValue(tema.toList(), "multi"))
                }
                if (enhetsnr != null) {
                    put("enhetsnr", listOf(enhetsnr.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/mapper",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    @Throws(RestClientResponseException::class)
    fun hentMappe(xCorrelationID: kotlin.String, id: kotlin.Long): Mappe {
        val result = hentMappeWithHttpInfo(xCorrelationID = xCorrelationID, id = id)
        return result?.body!!
    }

    @Throws(RestClientResponseException::class)
    fun hentMappeWithHttpInfo(xCorrelationID: kotlin.String, id: kotlin.Long): ResponseEntity<Mappe> {
        val localVariableConfig = hentMappeRequestConfig(xCorrelationID = xCorrelationID, id = id)
        return request<Unit, Mappe>(
            localVariableConfig
        )
    }

    fun hentMappeRequestConfig(xCorrelationID: kotlin.String, id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xCorrelationID.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
            "id" to id,
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/mapper/{id}",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

}
