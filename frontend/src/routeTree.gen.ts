/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SakRouteImport } from './routes/sak'
import { Route as BrevRouteImport } from './routes/brev'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PersonPersonidRouteImport } from './routes/person/$personid'

const SakRoute = SakRouteImport.update({
  id: '/sak',
  path: '/sak',
  getParentRoute: () => rootRouteImport,
} as any)
const BrevRoute = BrevRouteImport.update({
  id: '/brev',
  path: '/brev',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PersonPersonidRoute = PersonPersonidRouteImport.update({
  id: '/person/$personid',
  path: '/person/$personid',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/brev': typeof BrevRoute
  '/sak': typeof SakRoute
  '/person/$personid': typeof PersonPersonidRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/brev': typeof BrevRoute
  '/sak': typeof SakRoute
  '/person/$personid': typeof PersonPersonidRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/brev': typeof BrevRoute
  '/sak': typeof SakRoute
  '/person/$personid': typeof PersonPersonidRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/brev' | '/sak' | '/person/$personid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/brev' | '/sak' | '/person/$personid'
  id: '__root__' | '/' | '/about' | '/brev' | '/sak' | '/person/$personid'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  BrevRoute: typeof BrevRoute
  SakRoute: typeof SakRoute
  PersonPersonidRoute: typeof PersonPersonidRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sak': {
      id: '/sak'
      path: '/sak'
      fullPath: '/sak'
      preLoaderRoute: typeof SakRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/brev': {
      id: '/brev'
      path: '/brev'
      fullPath: '/brev'
      preLoaderRoute: typeof BrevRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/person/$personid': {
      id: '/person/$personid'
      path: '/person/$personid'
      fullPath: '/person/$personid'
      preLoaderRoute: typeof PersonPersonidRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  BrevRoute: BrevRoute,
  SakRoute: SakRoute,
  PersonPersonidRoute: PersonPersonidRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
