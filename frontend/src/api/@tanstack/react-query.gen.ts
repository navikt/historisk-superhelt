// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { createSak, findPersonByFnr, findSakerForPerson, getKodeverkStonadType, getPersonByMaskertIdent, getSakBySaksnummer, getUserInfo, oppdaterSak, type Options } from '../sdk.gen';
import type { CreateSakData, CreateSakError, CreateSakResponse, FindPersonByFnrData, FindPersonByFnrError, FindPersonByFnrResponse, FindSakerForPersonData, GetKodeverkStonadTypeData, GetPersonByMaskertIdentData, GetSakBySaksnummerData, GetUserInfoData, OppdaterSakData, OppdaterSakError, OppdaterSakResponse } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getSakBySaksnummerQueryKey = (options: Options<GetSakBySaksnummerData>) => createQueryKey('getSakBySaksnummer', options);

/**
 * Hent opp en sak
 */
export const getSakBySaksnummerOptions = (options: Options<GetSakBySaksnummerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSakBySaksnummer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSakBySaksnummerQueryKey(options)
    });
};

export const oppdaterSakMutation = (options?: Partial<Options<OppdaterSakData>>): UseMutationOptions<OppdaterSakResponse, OppdaterSakError, Options<OppdaterSakData>> => {
    const mutationOptions: UseMutationOptions<OppdaterSakResponse, OppdaterSakError, Options<OppdaterSakData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await oppdaterSak({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findSakerForPersonQueryKey = (options: Options<FindSakerForPersonData>) => createQueryKey('findSakerForPerson', options);

/**
 * Finn saker for en person
 */
export const findSakerForPersonOptions = (options: Options<FindSakerForPersonData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findSakerForPerson({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findSakerForPersonQueryKey(options)
    });
};

/**
 * opprett en ny sak
 */
export const createSakMutation = (options?: Partial<Options<CreateSakData>>): UseMutationOptions<CreateSakResponse, CreateSakError, Options<CreateSakData>> => {
    const mutationOptions: UseMutationOptions<CreateSakResponse, CreateSakError, Options<CreateSakData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSak({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Finn person basert på fødselsnummer
 */
export const findPersonByFnrMutation = (options?: Partial<Options<FindPersonByFnrData>>): UseMutationOptions<FindPersonByFnrResponse, FindPersonByFnrError, Options<FindPersonByFnrData>> => {
    const mutationOptions: UseMutationOptions<FindPersonByFnrResponse, FindPersonByFnrError, Options<FindPersonByFnrData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await findPersonByFnr({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserInfoQueryKey = (options?: Options<GetUserInfoData>) => createQueryKey('getUserInfo', options);

export const getUserInfoOptions = (options?: Options<GetUserInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserInfoQueryKey(options)
    });
};

export const getKodeverkStonadTypeQueryKey = (options?: Options<GetKodeverkStonadTypeData>) => createQueryKey('getKodeverkStonadType', options);

export const getKodeverkStonadTypeOptions = (options?: Options<GetKodeverkStonadTypeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKodeverkStonadType({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKodeverkStonadTypeQueryKey(options)
    });
};

export const getPersonByMaskertIdentQueryKey = (options: Options<GetPersonByMaskertIdentData>) => createQueryKey('getPersonByMaskertIdent', options);

export const getPersonByMaskertIdentOptions = (options: Options<GetPersonByMaskertIdentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPersonByMaskertIdent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPersonByMaskertIdentQueryKey(options)
    });
};
