// This file is auto-generated by @hey-api/openapi-ts

import { type Options, findSakerMp0V444, createSak, findPerson, getUserInfo, getSakBySaksnummer, typeKodeverk, getPersonMp0V444 } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { FindSakerMp0V444Data, CreateSakData, CreateSakError, CreateSakResponse, FindPersonData, FindPersonError, FindPersonResponse, GetUserInfoData, GetSakBySaksnummerData, TypeKodeverkData, GetPersonMp0V444Data } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const findSakerMp0V444QueryKey = (options: Options<FindSakerMp0V444Data>) => createQueryKey('findSakerMp0V444', options);

export const findSakerMp0V444Options = (options: Options<FindSakerMp0V444Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findSakerMp0V444({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findSakerMp0V444QueryKey(options)
    });
};

export const createSakMutation = (options?: Partial<Options<CreateSakData>>): UseMutationOptions<CreateSakResponse, CreateSakError, Options<CreateSakData>> => {
    const mutationOptions: UseMutationOptions<CreateSakResponse, CreateSakError, Options<CreateSakData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSak({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findPersonMutation = (options?: Partial<Options<FindPersonData>>): UseMutationOptions<FindPersonResponse, FindPersonError, Options<FindPersonData>> => {
    const mutationOptions: UseMutationOptions<FindPersonResponse, FindPersonError, Options<FindPersonData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await findPerson({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserInfoQueryKey = (options?: Options<GetUserInfoData>) => createQueryKey('getUserInfo', options);

export const getUserInfoOptions = (options?: Options<GetUserInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserInfoQueryKey(options)
    });
};

export const getSakBySaksnummerQueryKey = (options: Options<GetSakBySaksnummerData>) => createQueryKey('getSakBySaksnummer', options);

export const getSakBySaksnummerOptions = (options: Options<GetSakBySaksnummerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSakBySaksnummer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSakBySaksnummerQueryKey(options)
    });
};

export const typeKodeverkQueryKey = (options?: Options<TypeKodeverkData>) => createQueryKey('typeKodeverk', options);

export const typeKodeverkOptions = (options?: Options<TypeKodeverkData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await typeKodeverk({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: typeKodeverkQueryKey(options)
    });
};

export const getPersonMp0V444QueryKey = (options: Options<GetPersonMp0V444Data>) => createQueryKey('getPersonMp0V444', options);

export const getPersonMp0V444Options = (options: Options<GetPersonMp0V444Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPersonMp0V444({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPersonMp0V444QueryKey(options)
    });
};