// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateSakData, CreateSakErrors, CreateSakResponses, FindPersonByFnrData, FindPersonByFnrErrors, FindPersonByFnrResponses, FindSakerForPersonData, FindSakerForPersonErrors, FindSakerForPersonResponses, GetKodeverkSaksTypeData, GetKodeverkSaksTypeErrors, GetKodeverkSaksTypeResponses, GetPersonByMaskertIdentData, GetPersonByMaskertIdentErrors, GetPersonByMaskertIdentResponses, GetSakBySaksnummerData, GetSakBySaksnummerErrors, GetSakBySaksnummerResponses, GetUserInfoData, GetUserInfoErrors, GetUserInfoResponses, OppdaterSakData, OppdaterSakErrors, OppdaterSakResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Hent opp en sak
 */
export const getSakBySaksnummer = <ThrowOnError extends boolean = false>(options: Options<GetSakBySaksnummerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSakBySaksnummerResponses, GetSakBySaksnummerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sak/{saksnummer}',
        ...options
    });
};

export const oppdaterSak = <ThrowOnError extends boolean = false>(options: Options<OppdaterSakData, ThrowOnError>) => {
    return (options.client ?? client).put<OppdaterSakResponses, OppdaterSakErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sak/{saksnummer}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Finn saker for en person
 */
export const findSakerForPerson = <ThrowOnError extends boolean = false>(options: Options<FindSakerForPersonData, ThrowOnError>) => {
    return (options.client ?? client).get<FindSakerForPersonResponses, FindSakerForPersonErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sak',
        ...options
    });
};

/**
 * opprett en ny sak
 */
export const createSak = <ThrowOnError extends boolean = false>(options: Options<CreateSakData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateSakResponses, CreateSakErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sak',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Finn person basert på fødselsnummer
 */
export const findPersonByFnr = <ThrowOnError extends boolean = false>(options: Options<FindPersonByFnrData, ThrowOnError>) => {
    return (options.client ?? client).post<FindPersonByFnrResponses, FindPersonByFnrErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUserInfo = <ThrowOnError extends boolean = false>(options?: Options<GetUserInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserInfoResponses, GetUserInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user',
        ...options
    });
};

export const getKodeverkSaksType = <ThrowOnError extends boolean = false>(options?: Options<GetKodeverkSaksTypeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKodeverkSaksTypeResponses, GetKodeverkSaksTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sak/kodeverk/typer',
        ...options
    });
};

export const getPersonByMaskertIdent = <ThrowOnError extends boolean = false>(options: Options<GetPersonByMaskertIdentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPersonByMaskertIdentResponses, GetPersonByMaskertIdentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person/{maskertPersonident}',
        ...options
    });
};
