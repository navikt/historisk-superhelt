// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetAllSakerData, GetAllSakerResponses, GetAllSakerErrors, CreateSakData, CreateSakResponses, CreateSakErrors, FindPersonData, FindPersonResponses, FindPersonErrors, GetUserInfoData, GetUserInfoResponses, GetUserInfoErrors, GetSakBySaksnummerData, GetSakBySaksnummerResponses, GetSakBySaksnummerErrors, GetPersonData, GetPersonResponses, GetPersonErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getAllSaker = <ThrowOnError extends boolean = false>(options?: Options<GetAllSakerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSakerResponses, GetAllSakerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sak',
        ...options
    });
};

export const createSak = <ThrowOnError extends boolean = false>(options: Options<CreateSakData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSakResponses, CreateSakErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sak',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findPerson = <ThrowOnError extends boolean = false>(options: Options<FindPersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FindPersonResponses, FindPersonErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUserInfo = <ThrowOnError extends boolean = false>(options?: Options<GetUserInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserInfoResponses, GetUserInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user',
        ...options
    });
};

export const getSakBySaksnummer = <ThrowOnError extends boolean = false>(options: Options<GetSakBySaksnummerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSakBySaksnummerResponses, GetSakBySaksnummerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sak/{saksnummer}',
        ...options
    });
};

export const getPerson = <ThrowOnError extends boolean = false>(options: Options<GetPersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPersonResponses, GetPersonErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person/{maskertPersonident}',
        ...options
    });
};